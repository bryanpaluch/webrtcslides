<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>WebRTC and Nodejs</title>

		<meta name="description" content="A framework for easily creating beautiful presentations using HTML">
		<meta name="author" content="Hakim El Hattab">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<link rel="stylesheet" href="css/reveal.min.css">
		<link rel="stylesheet" href="css/theme/default.css" id="theme">

		<!-- For syntax highlighting -->
		<link rel="stylesheet" href="lib/css/zenburn.css">

		<!-- If the query includes 'print-pdf', use the PDF print sheet -->
		<script>
			document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
		</script>

		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>
  <script src="/js/adapter.js"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
<script type="text/javascript" src="/socket.io/socket.io.js"></script>
<script type="text/javascript">
  var localVideo;
  var miniVideo;
  var remoteVideo;
  var localStream;
  var remoteStream;
  var channel;
  var socketReady = false;
  var pc;
  var socket;
  var initiator = true;
  var started = false;
  // Set up audio and video regardless of what devices are present.
  var mediaConstraints = {'mandatory': {
                            'OfferToReceiveAudio':true, 
                            'OfferToReceiveVideo':true }};
  var isVideoMuted = false;
  var isAudioMuted = false;

  $(document).ready(function(){
	$("#startRTC").live("click", function(){
		maybeStart();
	});
  });

  function initialize() {
    localVideo = document.getElementById("localVideo");
    remoteVideo = document.getElementById("remoteVideo");
    resetStatus();
    startSocket();
    doGetUserMedia();
  }

  function startSocket() {
    console.log("Opening socket");
    socket = io.connect('/');

    socket.on('connect', function () { 
	socket.emit('rtc_init_offerer');
    	socketReady = true;
    });
    socket.on('rtc_answer', function(data){
        processSignalingMessage(data);
      });

  }

  function resetStatus() {
    if (!initiator) {
   
    } else {
    
    }
  }

  function doGetUserMedia() {
    // Call into getUserMedia via the polyfill (adapter.js).
    var constraints = {"mandatory": {}, "optional": []}; 
    try {
      getUserMedia({'audio':true, 'video':constraints}, onUserMediaSuccess,
                   onUserMediaError);
      console.log("Requested access to local media with mediaConstraints:\n" +
                  "  \"" + JSON.stringify(constraints) + "\"");
    } catch (e) {
      alert("getUserMedia() failed. Is this a WebRTC capable browser?");
      console.log("getUserMedia failed with exception: " + e.message);
    }
  }

  function createPeerConnection() {
    var pc_config = {"iceServers": [{"url": "stun:stun.l.google.com:19302"}]};
    try {
      // Create an RTCPeerConnection via the polyfill (adapter.js).
      pc = new RTCPeerConnection(pc_config);
      pc.onicecandidate = onIceCandidate;
      console.log("Created RTCPeerConnnection with config:\n" + "  \"" +
                  JSON.stringify(pc_config) + "\".");
    } catch (e) {
      console.log("Failed to create PeerConnection, exception: " + e.message);
      alert("Cannot create RTCPeerConnection object; WebRTC is not supported by this browser.");
        return;
    }

    pc.onconnecting = onSessionConnecting;
    pc.onopen = onSessionOpened;
    pc.onaddstream = onRemoteStreamAdded;
    pc.onremovestream = onRemoteStreamRemoved;
  }

  function maybeStart() {
    if (!started && localStream && socketReady) {
      setStatus("Connecting...");
      console.log("Creating PeerConnection.");
      createPeerConnection();
      console.log("Adding local stream.");
      pc.addStream(localStream);
      started = true;
      // Caller initiates offer to peer.
      if (initiator)
        doCall();
    }
  }

  function setStatus(state) {
 //   footer.innerHTML = state;
  }

  function doCall() {
    console.log("Sending offer to peer.");
    pc.createOffer(setLocalAndSendMessage, null, mediaConstraints);
  }

  function doAnswer() {
    console.log("Sending answer to peer.");
    pc.createAnswer(setLocalAndSendMessage, null, mediaConstraints);
  }

  function setLocalAndSendMessage(sessionDescription) {
    // Set Opus as the preferred codec in SDP if Opus is present.
    sessionDescription.sdp = preferOpus(sessionDescription.sdp);
    pc.setLocalDescription(sessionDescription);
    sendMessage(sessionDescription);
  }

  function sendMessage(message) {
    socket.emit('rtc_request', message); 
  }

  function processSignalingMessage(msg) {
   

    if (msg.type === 'offer') {
      // Callee creates PeerConnection
      if (!initiator && !started)
        maybeStart();

      pc.setRemoteDescription(new RTCSessionDescription(msg));
      doAnswer();
    } else if (msg.type === 'answer' && started) {
      pc.setRemoteDescription(new RTCSessionDescription(msg));
    } else if (msg.type === 'candidate' && started) {
      var candidate = new RTCIceCandidate({sdpMLineIndex:msg.label,
                                           candidate:msg.candidate});
      pc.addIceCandidate(candidate);
    } else if (msg.type === 'bye' && started) {
      onRemoteHangup();
    }
  }

  function onChannelMessage(message) {
    console.log('S->C: ' + message.data);
    processSignalingMessage(message.data);
  }
  function onChannelError() {
    console.log('Channel error.');
  }
  function onChannelClosed() {
    console.log('Channel closed.');
  }

  function onUserMediaSuccess(stream) {
    console.log("User has granted access to local media.");
    // Call the polyfill wrapper to attach the media stream to this element.
    attachMediaStream(localVideo, stream);
    localVideo.style.opacity = 1;
    localStream = stream;
    // Caller creates PeerConnection.
    //if (initiator) maybeStart();
  }

  function onUserMediaError(error) {
    console.log("Failed to get access to local media. Error code was " + error.code);
    alert("Failed to get access to local media. Error code was " + error.code + ".");
  }

  function onIceCandidate(event) {
    if (event.candidate) {
      sendMessage({type: 'candidate',
                   label: event.candidate.sdpMLineIndex,
                   id: event.candidate.sdpMid,
                   candidate: event.candidate.candidate});
    } else {
      console.log("End of candidates.");
    }
  }

  function onSessionConnecting(message) {
    console.log("Session connecting.");
  }
  function onSessionOpened(message) {
    console.log("Session opened.");
  }

  function onRemoteStreamAdded(event) {
    console.log("Remote stream added.");
 
    attachMediaStream(remoteVideo, event.stream);
    remoteStream = event.stream;
    waitForRemoteVideo();  
  }
  function onRemoteStreamRemoved(event) {
    console.log("Remote stream removed.");
  }

  function onHangup() {
    console.log("Hanging up.");
    transitionToDone();
    stop();
    // will trigger BYE from server
    socket.close();
  }
   
  function onRemoteHangup() {
    console.log('Session terminated.');
    transitionToWaiting();
    stop();
    initiator = 0;
  }

  function stop() {
    started = false;
    isAudioMuted = false;
    isVideoMuted = false;
    pc.close();
    pc = null;
  }

  function waitForRemoteVideo() {
    if (remoteStream.videoTracks.length === 0 || remoteVideo.currentTime > 0) {
      transitionToActive();
    } else {
      setTimeout(waitForRemoteVideo, 100);
    }
  }
  function transitionToActive() {
    remoteVideo.style.opacity = 1;
   // setTimeout(function() { localVideo.src = ""; }, 500);
   }
  function transitionToWaiting() {
    setTimeout(function() {
                remoteVideo.src = "" }, 500);
    remoteVideo.style.opacity = 0;
    resetStatus();
  }
  function transitionToDone() {
    localVideo.style.opacity = 0;
    remoteVideo.style.opacity = 0;
   }
  function enterFullScreen() {
    container.webkitRequestFullScreen();
  }

  function toggleVideoMute() {
    if (localStream.videoTracks.length === 0) {
      console.log("No local video available.");
      return;
    }

    if (isVideoMuted) {
      for (i = 0; i < localStream.videoTracks.length; i++) {
        localStream.videoTracks[i].enabled = true;
      }
      console.log("Video unmuted.");
    } else {
      for (i = 0; i < localStream.videoTracks.length; i++) {
        localStream.videoTracks[i].enabled = false;
      }
      console.log("Video muted.");
    }

    isVideoMuted = !isVideoMuted;    
  }

  function toggleAudioMute() {
    if (localStream.audioTracks.length === 0) {
      console.log("No local audio available.");
      return;
    }

    if (isAudioMuted) {
      for (i = 0; i < localStream.audioTracks.length; i++) {
        localStream.audioTracks[i].enabled = true;
      }
      console.log("Audio unmuted.");
    } else {
      for (i = 0; i < localStream.audioTracks.length; i++){
        localStream.audioTracks[i].enabled = false;
      }
      console.log("Audio muted.");
    }

    isAudioMuted = !isAudioMuted;  
  }

  setTimeout(initialize, 1);

  // Send BYE on refreshing(or leaving) a demo page
  // to ensure the room is cleaned for next session.
  window.onbeforeunload = function() {
    sendMessage({type: 'bye'});
  }

  // Ctrl-D: toggle audio mute; Ctrl-E: toggle video mute.
  // On Mac, Command key is instead of Ctrl.
  // Return false to screen out original Chrome shortcuts.
  document.onkeydown = function() {
    if (navigator.appVersion.indexOf("Mac") != -1) {
      if (event.metaKey && event.keyCode === 68) {
        toggleAudioMute();
        return false;
      }
      if (event.metaKey && event.keyCode === 69) {
        toggleVideoMute();
        return false;
      }
    } else {
      if (event.ctrlKey && event.keyCode === 68) {
        toggleAudioMute();
        return false;
      }
      if (event.ctrlKey && event.keyCode === 69) {
        toggleVideoMute();
        return false;
      }
    }
  }

  // Set Opus as the default audio codec if it's present.
  function preferOpus(sdp) {
    var sdpLines = sdp.split('\r\n');

    // Search for m line.
    for (var i = 0; i < sdpLines.length; i++) {
        if (sdpLines[i].search('m=audio') !== -1) {
          var mLineIndex = i;
          break;
        } 
    }
    if (mLineIndex === null)
      return sdp;

    // If Opus is available, set it as the default in m line.
    for (var i = 0; i < sdpLines.length; i++) {
      if (sdpLines[i].search('opus/48000') !== -1) {        
        var opusPayload = extractSdp(sdpLines[i], /:(\d+) opus\/48000/i);
        if (opusPayload)
          sdpLines[mLineIndex] = setDefaultCodec(sdpLines[mLineIndex], opusPayload);
        break;
      }
    }

    // Remove CN in m line and sdp.
    sdpLines = removeCN(sdpLines, mLineIndex);

    sdp = sdpLines.join('\r\n');
    return sdp;
  }

  function extractSdp(sdpLine, pattern) {
    var result = sdpLine.match(pattern);
    return (result && result.length == 2)? result[1]: null;
  }

  // Set the selected codec to the first in m line.
  function setDefaultCodec(mLine, payload) {
    var elements = mLine.split(' ');
    var newLine = new Array();
    var index = 0;
    for (var i = 0; i < elements.length; i++) {
      if (index === 3) // Format of media starts from the fourth.
        newLine[index++] = payload; // Put target payload to the first.
      if (elements[i] !== payload)
        newLine[index++] = elements[i];
    }
    return newLine.join(' ');
  }

  // Strip CN from sdp before CN constraints is ready.
  function removeCN(sdpLines, mLineIndex) {
    var mLineElements = sdpLines[mLineIndex].split(' ');
    // Scan from end for the convenience of removing an item.
    for (var i = sdpLines.length-1; i >= 0; i--) {
      var payload = extractSdp(sdpLines[i], /a=rtpmap:(\d+) CN\/\d+/i);
      if (payload) {
        var cnPos = mLineElements.indexOf(payload);
        if (cnPos !== -1) {
          // Remove CN payload from m line.
          mLineElements.splice(cnPos, 1);
        }
        // Remove CN line in sdp
        sdpLines.splice(i, 1);
      }
    }

    sdpLines[mLineIndex] = mLineElements.join(' ');
    return sdpLines;
  }
</script>
	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">
    <section>        <h3>
        <font face="League Gothic">webrtc + nodejs</font>
    </h3>
        <div>
            <font face="League Gothic">
                <br>
            </font>
        </div>
        <div>
            <font face="League Gothic">
                <br>
            </font>
        </div>
        <div>
            <font face="League Gothic">
                <br>
            </font>
        </div>
        <div>
            <font face="League Gothic">
                <br>
            </font>
        </div>
        <div>
            <font face="League Gothic">
                <br>
            </font>
        </div>
        <div>
            <font face="League Gothic">
                <br>
            </font>
        </div>
        <div>
    <font face="League Gothic">&nbsp;Bryan Paluch @letthisbemywrit</font>
        </div>
</section>
<section>
    <section>        <h3 style="text-align: center;">
            <font face="League Gothic">WHAT?</font>
        </h3>
        <div style="text-align: left;">
            <ul>
                <li>WebRTC is a javascript API that is being drafted by W3C which enables Voice, Video and Data communications between peers and servers.</li>
                <li>Its a Media and Streaming Engine for your browser.</li>
                <li>It also gets around NAT issues using ICE...</li>
    <li>NAT issues? Huh?&nbsp;</li>
            </ul>
        </div>
</section>
<section>
    <h2>Real Time Communication = UDP</h2>
    <div style="text-align: left;">
        <ul>
            <li>The web is built on TCP/IP but TCP doesn't work very well for real time communication.</li>
            <li>With tcp lost packets are resent</li>
            <li>A resent packet is an old frame and is dropped anyway</li>
            <li>Communication uses RTP and RTCP</li>
            <li>RTP/RTCP uses UDP</li>
            <li>UDP can be tricky to route in a NAT</li>
        </ul>
    </div>
</section>
<section>
    <h2>NAT/<font face="League Gothic">Firewal</font>ls</h2>
    <div style="text-align: left;">
        <ul>
            <li>NATs don't typically like UDP traffic coming from unknown sources</li>
            <li>Your home router doesn't know you want to chat with your friends so it doesn't allow your friends UDP packets to come into your home network</li>
        </ul>
        <div>
            <br>
        </div>
        <div>
            <br>
        </div>
        <div>So hey router I uh have some friends that I want to chat with if I send them my ip address and a port number can they just send an RTP stream my way?</div>
        <div>
            <br>
        </div>
    </div>
</section>
<section>
    <h2>NO</h2>
    <h2>
        <img src="http://i.imgur.com/XXKum.jpg">
        <br>
    </h2>
    <div>Well err, what if I use a defined protocol like SIP so you know everything is on the up and up, and you know which IP their traffic will be coming from?</div>
</section>
<section>
    <h2>NO<br>
    </h2>
    <h2>
        <img src="http://i.imgur.com/XXKum.jpg">
    </h2>
    <div>Well Hmm what if I use STUN (Session Traversal Utilities for NAT) / ICE and we do some confusing UDP binding tricks</div>
</section>
<section>
    <h2 style="">OK BUT ITS YOUR FUNERAL</h2>
    <h2>
        <img src="http://i.imgur.com/XXKum.jpg">
    </h2>
    <div>
        <br>
    </div>
</section>
<section>
    <h2>STUn/ICE</h2>
    <div style="text-align: left;">
        <ul>
            <li>ICE in a nutshell</li>
            <li>Get your IP addresses using STUN</li>
            <li>Bind ip/port combinations using STUN (Candidates)</li>
            <li>Share those candidates with peers, and respond to their connectivity checks</li>
            <li>If a connectivity check works, send RTP</li>
        </ul>
    </div>
</section>
<section>
    <h2>
        <img src="http://i.imgur.com/Lbkov.png">
        <br>
    </h2>
</section>
</section>
<section>
    <section>   <h2>
            <font face="League Gothic">Why</font>
        </h2>
        <div style="text-align: left;">
            <ul>
                <li>
                    <font face="League Gothic">Plugins Suck. Nobody wants to rely on plugins.</font>
    </li>
                <li>
                    <font face="League Gothic">Building your own voice/video engine is difficult</font>
                </li>
                <li>
                    <font face="League Gothic">Even if you do, it may not work with someone else's. Interop Nightmares.</font>
    </li>
                <li>
                    <font face="League Gothic">Devices are finally powerful enough</font>
                </li>
                <li>
                    <font face="League Gothic">Pressure for most platforms to implement similar API's / Standards</font>
</li>
<li>
    <font face="League Gothic">Lowers barrier to entry for communication services on the browser</font>
    </li>
            </ul>
        </div>
</section>
<section>
    <h2>
        <img src="http://i.imgur.com/Cm4NQ.png" style="line-height: 1.2em; font-family: Lato, Times, 'Times New Roman', serif; font-size: 36px; letter-spacing: -0.02em;">
    </h2>
</section>
</section>
<section>
    <section>
        <h2>How?</h2>
<code>

JSEP or Javascript Session&nbsp;Establishment&nbsp;Protocol</code>
        <div>
            <pre>
              <code class="javascript">
var pc = RTCPeerConnection(config);
pc.onIceCandidate = someFunction;
pc.addStream(StreamFromGetUserMedia);
pc.createOffer(setAndSend, null, constraints);
function SetAndSend(sessionDescription){
  pc.setLocalDescription(sessionDescription);
  io.emit('rtc_request', sessionDescription);
 //Wait what? Signaling?
}
              </code>
            </pre>
        </div>
    </section>
    <section>
        <h2>Remote</h2>
        <div style="text-align: left;">
            <pre>
              <code class="javascript">
io.on('rtc_request', function(data){
//Do everything on the previous slide except creating an offer
pc.setRemoteDescription(new RTCSessionDescription(data));
pc.createAnswer(SetLocalAndSendMessage,null, constraints);
});
function SetLocalAndSendMessage(sdp){
  pc.setLocalDescription(streamFromGetUserMedia);
  io.emit('rtc_answer', sdp);
}
              </code>
            </pre>
        </div>
    </section>
    <section>
        <h2>Local Again</h2>
        <pre>
              <code class="javascript">
io.on('rtc_request', function(data){
  pc.setRemoteDescription(new SessionDescription(data));
  //onRemoteStreamAdded will get called now
});
function onRemoteStreamAdded(event){
  remoteVideo.src = webkitURL.createObjectURL(event.stream);
  //Then wait for video
}

//I left out what happens with ICE candidates
// really good example at https://apprtc.appspot.com
</code>
</pre>
    </section>
</section>
<section>
    <h2>RTCWEB</h2>
    <div style="text-align: left;">
        <ul>
            <li>An IETF activity to define the formats and protocols used to communicate browsers</li>
            <li>Highlights</li>
            <li>Mandatory to Implement Codecs</li>
            <li>PCMU/PCMA/OPUS</li>
            <li>VP8 or H264?</li>
            <li>Multiplexing RTP/RTCP</li>
            <li>Secure RTP (Encryption Methods)</li>
            <li>No Signalling Defined</li>
        </ul>
    </div>
</section>
<section>
  <section>
    <h2>Signaling?</h2>
    <div style="text-align: left;">
        <ul>
            <li>No defined method of doing signaling with webrtc</li>
            <li>Roll your own</li>
            <li>Socket.io / Websockets are a great transports</li>
            <li>Nodejs makes building any kind of signaling engine easy</li>
            <li>Demo rtcwith.me</li>
        </ul>
    </div>
  </section>
  <section>
    <h2>Demo</h2>
    <div style="text-align: center;">
	<button id="startRTC">Start</button>
    </div>
      <div id="local" style="float: left;width: 50%;">
        <video width="100%" height="100%" id="localVideo" autoplay="autoplay"/>
      </div>
      <div id="remote" style="float: left;width: 50%;">
        <video width="100%" height="100%" id="remoteVideo" autoplay="autoplay"/>
      </div>
    
  </section>
</section>
<section>
    <section>
        <h2>Telecoms are cool too</h2>
        <div style="text-align: left;">
            <ul>
                <li>The PSTN was the original Cloud</li>
                <li>We have this great network that nobody wants to use anymore.&nbsp;</li>
                <li>We are still trying to innovate on communications.</li>
                <li>eg. video set top boxes, video cell phone calling,</li>
                <li>RCS, Rich communication Suite</li>
                <li>We should open up our network to allow webrtc clients to use our services</li>
                <li>But how?</li>
            </ul>
        </div>
    </section>
    <section>
        <h2>RTCWeb Gateways</h2>
        <div style="text-align: left;">
            <ul>
                <li style="">Gateway that allows webrtc clients to talk to other types of communication clients</li>
                <li style="">Handles Media/RTP interop</li>
                <li style="">Allows media to flow into a protected network</li>
                <li style="">No standards defined</li>
                <li style="">Will make webrtc applications awesome</li>
                <li style="">Will allow for webrtc verticals to use communication services from providers.</li>
                <li style="">Calls from browser to phones/set top boxes are possible</li>
            </ul>
        </div>
    </section>
    <section>
        <h2>Not&nbsp;COMPLETELY&nbsp;working demo alert!</h2>
        <div style="text-align: left;">
            <ul>
                <li>Firewalls issues will make the call fail</li>
                <li>But you will get the idea</li>
                <li>rtcwith.me phone in chat</li>
            </ul>
        </div>
    </section>
</section>
<section>
    <h2>Questions?</h2>
    <div style="text-align: left;">
        <ul>
            <li>Want to create your own webrtc vertical?</li>
            <li>
                <a href="https://github.com/bryanpaluch/webrtc-to-me">https://github.com/bryanpaluch/webrtc-to-me</a>
                <br>
            </li>
            <li>
                <a href="https://github.com/bryanpaluch/jsep-to-sip-gw">https://github.com/bryanpaluch/jsep-to-sip-gw</a>
                <br>
            </li>
        </ul>
        <div>
            <br>
        </div>
        <div>
            <br>
        </div>
        <div>
            <br>
        </div>
        <ul>
            <li>@letthisbemywrit</li>
            <li>bryanpaluch@gmail.com</li>
        </ul>
    </div>
</section>
</div>

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.min.js"></script>

		<script>

			// Full list of configuration options available here:
			// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
				transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/none

				// Optional libraries used to extend on reveal.js
				dependencies: [
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
					{ src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
				//	 { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
				]
			});

		</script>

	</body>
</html>
